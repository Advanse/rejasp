<?xml version="1.0" encoding="ISO-8859-1"?>
<Indications>
  <indication index="0">
    <name>Database Persistence</name>
    <description>Indication for database persistence using java.sql package and text matchs.</description>
    <Packages>
      <package index="0">
        <name>java.sql</name>
        <description>Provides the API for accessing and processing data stored in a data source (usually a relational database) using the JavaTM programming language.</description>
        <Interfaces>
          <interface index="0">
            <name>Array</name>
            <description>The mapping in the Java programming language for the SQL type ARRAY.</description>
          </interface>
          <interface index="1">
            <name>Blob</name>
            <description>The representation (mapping) in the JavaTM programming language of an SQL BLOB value.</description>
          </interface>
          <interface index="2">
            <name>CallableStatement</name>
            <description>The interface used to execute SQL stored procedures.</description>
          </interface>
          <interface index="3">
            <name>Clob</name>
            <description>The mapping in the JavaTM programming language for the SQL CLOB type.</description>
          </interface>
          <interface index="4">
            <name>Connection</name>
            <description>A connection (session) with a specific database.</description>
          </interface>
          <interface index="5">
            <name>DatabaseMetaData</name>
            <description>Comprehensive information about the database as a whole.</description>
          </interface>
          <interface index="6">
            <name>Driver</name>
            <description>The interface that every driver class must implement.</description>
          </interface>
          <interface index="7">
            <name>ParameterMetaData</name>
            <description>An object that can be used to get information about the types and properties of the parameters in a PreparedStatement object.</description>
          </interface>
          <interface index="8">
            <name>PreparedStatement</name>
            <description>An object that represents a precompiled SQL statement.</description>
          </interface>
          <interface index="9">
            <name>Ref</name>
            <description>The mapping in the Java programming language of an SQL REF  value, which is a reference to an SQL structured type value in the database.</description>
          </interface>
          <interface index="10">
            <name>ResultSet</name>
            <description>A table of data representing a database result set, which is usually generated by executing a statement that queries the database.</description>
          </interface>
          <interface index="11">
            <name>ResultSetMetaData</name>
            <description>An object that can be used to get information about the types and properties of the columns in a ResultSet object.</description>
          </interface>
          <interface index="12">
            <name>Savepoint</name>
            <description>The representation of a savepoint, which is a point within the current transaction that can be referenced from the Connection.rollback method.</description>
          </interface>
          <interface index="13">
            <name>SQLData</name>
            <description>The interface used for the custom mapping of an SQL user-defined type (UDT) to a class in the Java programming language.</description>
          </interface>
          <interface index="14">
            <name>SQLInput</name>
            <description>An input stream that contains a stream of values representing an instance of an SQL structured type or an SQL distinct type.</description>
          </interface>
          <interface index="15">
            <name>SQLOutput</name>
            <description>The output stream for writing the attributes of a user-defined type back to the database.</description>
          </interface>
          <interface index="16">
            <name>Statement</name>
            <description>The object used for executing a static SQL statement and returning the results it produces.</description>
          </interface>
          <interface index="17">
            <name>Struct</name>
            <description>The standard mapping in the Java programming language for an SQL structured type.</description>
          </interface>
        </Interfaces>
        <Classes>
          <class index="0">
            <name>Date</name>
            <description>A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE value.</description>
          </class>
          <class index="1">
            <name>DriverManager</name>
            <description>The basic service for managing a set of JDBC drivers.</description>
          </class>
          <class index="2">
            <name>DriverPropertyInfo</name>
            <description>Driver properties for making a connection.</description>
          </class>
          <class index="3">
            <name>SQLPermission</name>
            <description>The permission for which the SecurityManager will check when code that is running in an applet calls the DriverManager.setLogWriter method or the DriverManager.setLogStream (deprecated) method.</description>
          </class>
          <class index="4">
            <name>Time</name>
            <description>A thin wrapper around the java.util.Date class that allows the JDBC API to identify this as an SQL TIME value.</description>
          </class>
          <class index="5">
            <name>Timestamp</name>
            <description>A thin wrapper around java.util.Date that allows the JDBC API to identify this as an SQL TIMESTAMP value.</description>
          </class>
          <class index="6">
            <name>Types</name>
            <description>The class that defines the constants that are used to identify generic SQL types, called JDBC types.</description>
          </class>
        </Classes>
        <Exceptions>
          <exception index="0">
            <name>BatchUpdateException</name>
            <description>An exception thrown when an error occurs during a batch update operation.</description>
          </exception>
          <exception index="1">
            <name>DataTruncation</name>
            <description>An exception that reports a DataTruncation warning (on reads) or throws a DataTruncation exception (on writes) when JDBC unexpectedly truncates a data value.</description>
          </exception>
          <exception index="2">
            <name>SQLException</name>
            <description>An exception that provides information on a database access error or other errors.</description>
          </exception>
          <exception index="3">
            <name>SQLWarning</name>
            <description>	An exception that provides information on database access warnings.</description>
          </exception>
        </Exceptions>
      </package>
    </Packages>
    <Rules>
      <rule index="0">
        <target>variable name</target>
        <matchingRule>contains</matchingRule>
        <caseSensity>false</caseSensity>
        <Words>
          <word index="0">sql</word>
        </Words>
      </rule>
      <rule index="1">
        <target>string literal</target>
        <matchingRule>starts with</matchingRule>
        <caseSensity>false</caseSensity>
        <Words>
          <word index="0">insert into</word>
          <word index="1">select</word>
          <word index="2">update</word>
          <word index="3">delete from</word>
        </Words>
      </rule>
    </Rules>
  </indication>
  <indication index="1">
    <name>Logging</name>
    <description>Indication for logging using java.util.logging package.</description>
    <Packages>
      <package index="0">
        <name>java.util.logging</name>
        <description>Provides the classes and interfaces of the JavaTM 2 platform's core logging facilities.</description>
        <Interfaces>
          <interface index="0">
            <name>Filter</name>
            <description>A Filter can be used to provide fine grain control over what is logged, beyond the control provided by log levels.</description>
          </interface>
          <interface index="1">
            <name>LoggingMXBean</name>
            <description>The management interface for the logging facility.</description>
          </interface>
        </Interfaces>
        <Classes>
          <class index="0">
            <name>ConsoleHandler</name>
            <description>This Handler publishes log records to System.err.</description>
          </class>
          <class index="1">
            <name>ErrorManager</name>
            <description>ErrorManager objects can be attached to Handlers to process any error that occur on a Handler during Logging.</description>
          </class>
          <class index="2">
            <name>FileHandler</name>
            <description>Simple file logging Handler.</description>
          </class>
          <class index="3">
            <name>Formatter</name>
            <description>A Formatter provides support for formatting LogRecords.</description>
          </class>
          <class index="4">
            <name>Handler</name>
            <description>A Handler object takes log messages from a Logger and exports them.</description>
          </class>
          <class index="5">
            <name>Level</name>
            <description>The Level class defines a set of standard logging levels that can be used to control logging output.</description>
          </class>
          <class index="6">
            <name>Logger</name>
            <description>A Logger object is used to log messages for a specific system or application component.</description>
          </class>
          <class index="7">
            <name>LoggingPermission</name>
            <description>The permission which the SecurityManager will check when code that is running with a SecurityManager calls one of the logging control methods (such as Logger.setLevel).</description>
          </class>
          <class index="8">
            <name>LogManager</name>
            <description>There is a single global LogManager object that is used to maintain a set of shared state about Loggers and log services.</description>
          </class>
          <class index="9">
            <name>LogRecord</name>
            <description>LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers.</description>
          </class>
          <class index="10">
            <name>MemoryHandler</name>
            <description>Handler that buffers requests in a circular buffer in memory.</description>
          </class>
          <class index="11">
            <name>SimpleFormatter</name>
            <description>Print a brief summary of the LogRecord in a human readable format.</description>
          </class>
          <class index="12">
            <name>SocketHandler</name>
            <description>Simple network logging Handler.</description>
          </class>
          <class index="13">
            <name>StreamHandler</name>
            <description>Stream based logging Handler.</description>
          </class>
          <class index="14">
            <name>XMLFormatter</name>
            <description>Format a LogRecord into a standard XML format.</description>
          </class>
        </Classes>
        <Exceptions/>
      </package>
    </Packages>
    <Rules/>
  </indication>
  <indication index="2">
    <name>Buffering</name>
    <description>Indication for buffering.</description>
    <Packages>
      <package index="0">
        <name>java.lang</name>
        <description>Provides classes that are fundamental to the design of the Java programming language.</description>
        <Interfaces/>
        <Classes>
          <class index="0">
            <name>StringBuffer</name>
            <description>A string buffer implements a mutable sequence of characters.</description>
          </class>
        </Classes>
        <Exceptions/>
      </package>
      <package index="1">
        <name>java.io</name>
        <description>Provides for system input and output through data streams, serialization and the file system.</description>
        <Interfaces/>
        <Classes>
          <class index="0">
            <name>BufferedInputStream</name>
            <description>A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset  methods.</description>
          </class>
          <class index="1">
            <name>BufferedReader</name>
            <description>Read text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.</description>
          </class>
          <class index="2">
            <name>FileOutputStream</name>
            <description>A file output stream is an output stream for writing data to a File or to a FileDescriptor.</description>
          </class>
        </Classes>
        <Exceptions/>
      </package>
    </Packages>
    <Rules/>
  </indication>
</Indications>
